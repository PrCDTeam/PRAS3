package com {	import pointroll.initAd;	import pointroll.datastorage.*;	import pointroll.panel.*	import pointroll.info.getFolderPath	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.Dictionary;	import flash.display.Bitmap;	import flash.events.EventDispatcher	import flash.utils.setTimeout;	import flash.utils.clearTimeout;	import flash.utils.setInterval;	import flash.utils.clearInterval;	import pointroll.getFlashVar;	import flash.system.LoaderContext;	import com.pointroll.api.utils.net.isLocal	import flash.text.TextFieldAutoSize	public class PrUtils extends EventDispatcher{		public static const SERVICE_PROXY:String = 'http://smq.pointroll.com/clients/services/proxy/proxy.ashx?proxy=';		public static const IMAGE_PROXY:String = 'http://smq.pointroll.com/clients/pointroll/image/thumbnailproxy.ashx?url=';		public static const AUTOPANEL_CLOSE:String = 'autoPanelClose';		public static const AUTOPANEL_OPEN:String = 'autoPanelOpen';		public static const IMAGE_LOAD_COMPLETE:String = 'imageLoadComplete';				private static const PRE:String = 'PR Utils:> ';						public static var instance:PrUtils;				private static var textBoxSizeDictionary:Dictionary = new Dictionary()		public var live:Boolean;		public var rollExp:Boolean;		public var isPreExp:Boolean;		public var isAutoPanel:Boolean;		public var autoPanelTime:int;		public var imageFolder:String;				private var main_mc:MovieClip;		private var pinned:Boolean = false;		private var pushDistance:int = 0;		private var containerDict:Dictionary = new Dictionary();		private var containerArray:Array = new Array();		private var imgNum:uint = 0;		private var autoPanelTimeout:Number;		private var intervalDictionary:Dictionary = new Dictionary();				public function PrUtils(main:MovieClip, isPanel:Boolean = false) {			pointroll.initAd(main)			main_mc = main;			instance = this;			live = (main_mc.root != null)? (main_mc.root.loaderInfo.url.indexOf('file') != 0) : false;			imageFolder = (live)? pointroll.info.getFolderPath() : 'images/';			rollExp = (pointroll.getFlashVar('rollExp') != 'false')			if(isPanel && !rollExp)instance.pinPanel();		}				public static function launchClick(tag = 1, newWindow:Boolean = true, noun:String = null):void{			var n:String = (tag is String)? tag + 'ClickTag' : 'clickTag' + Math.floor(tag);			if(instance)instance.unpinPanel();			pointroll.launchURL(pointroll.getFlashVar(n), newWindow, noun)			log(n);				}				public static function launchEmptyClick(tag, url:String, newWindow:Boolean = true, noun:String = null):void{			var n:String = (tag is String)? tag + 'ClickTag' : 'clickTag' + Math.floor(tag);			log(n)			n = pointroll.getFlashVar(n) || '';			if(instance)instance.unpinPanel();			pointroll.launchURL(n + encodeURIComponent(url), newWindow, noun);				log(url);		}				public static function addMouseEvent(clips:Array, eventTypes:Array, handler:Function):void{						for (var i:uint = 0; i < clips.length; i++){				var mc = clips[i]								if(mc is MovieClip){					MovieClip(mc).buttonMode = true;					MovieClip(mc).mouseChildren = false;				}								for (var n:uint = 0; n < eventTypes.length; n++){					var type:String = eventTypes[n]					mc.addEventListener(type, handler)					if(type == MouseEvent.MOUSE_OVER)MovieClip(mc).gotoAndStop(1)				}			}		}				public static  function getPanelPath(advertiser:String, panelID:int):String{			var s:String = 'http://speed.pointroll.com/PointRoll/Media/Panels/'+ advertiser +'/'+ String(panelID) +'/'			if(isLocal())trace(s)			return s		}		//-- PRE-EXPANDABLE CONTROLS --------------------------------------------------------------//		public function createAutoUIPanel(distance:int = 0):void{			isAutoPanel = (pointroll.getFlashVar('isAutoPanel') == 'true');			autoPanelTime = int(pointroll.getFlashVar('autoPanelTime')) || 7;						instance.pinPanel();			if(distance != 0){				pushDistance = distance;				pointroll.panel.pushDownPanel(0, distance);			}						if(isAutoPanel){				setDSVar('autoPanelClosed', 'false')				autoPanelTimeout = setTimeout(close, autoPanelTime*1000)			} else if (rollExp){				main_mc.stage.addEventListener(Event.MOUSE_LEAVE, close);			}		}				public function createPreExpBanner():void{			trace("REMINDER: Call 'killPanelListener()' when 'AUTOPANEL_CLOSE' event is dispatched")			isPreExp = (pointroll.getFlashVar('isPreExp') == 'true');			if(live && isPreExp){				pointroll.datastorage.checkOnInterval('autoPanelClosed', 100,  autoPanelClosedHandler)			}else{				autoPanelClosedHandler('autoPanelClosed', 'true')			}		}				public function killPanelListener():void{			stopDSAlert('autoPanelClosed')		}				private function autoPanelClosedHandler(n:String, v:String):void{						if(v == 'true'){				alertPanelClosed()			}			}				public function stopAutoPanelTimer():void{			if(isAutoPanel){				clearTimeout(autoPanelTimeout);			}		}				private function alertPanelClosed():void{			dispatchEvent(new Event(AUTOPANEL_CLOSE));			setDSVar('autoPanelClosed', 'true')		}				public static function loadProxiedPointRollImage(loader:Loader, advertiser:String, panelID:uint, imageName:String, eventListener:Function = null):void{			var imageFolder:String = pointroll.getFlashVar('imageFolder') || getPanelPath(advertiser, panelID);			loadProxiedImage(loader, imageFolder+imageName, eventListener)		}				public static function loadProxiedImage(loader:Loader, imageName:String, eventListener:Function = null):void{			if(eventListener != null)loader.contentLoaderInfo.addEventListener(Event.COMPLETE, eventListener)			loader.load(proxyImageRequest(imageName), new LoaderContext(true))//			trace(proxyImageRequest(imageName).url)		}		public static function proxyImageRequest(imageName:String):URLRequest{			var r:URLRequest = ((instance && instance.live) || !instance)? new URLRequest(attachProxyURL(imageName)) : new URLRequest(imageName)			return r;		}		public static function attachProxyURL(imageName:String):String{			return IMAGE_PROXY + escape(imageName)			}		public static function truncateTextToFit(tf:TextField, str:String):void {			var origWidth:Number = tf.width;			var origHeight:Number = tf.height;			tf.htmlText = str;					if(tf.multiline){				while (tf.textHeight>origHeight) {					tf.text = tf.text.slice(0,tf.text.length - 2) + "…" ;					tf.text = tf.text.substr(0, tf.text.lastIndexOf(' '))  + "…";				}			}else{				while (tf.textWidth > origWidth) {					tf.text = tf.text.slice(0,tf.text.length - 2) + "…";					tf.text = tf.text.substr(0, tf.text.lastIndexOf(' '))  + "…";				}			}		}		public static function shrinkTextToFit(tf:TextField, str:String, maxSize:uint = 20):void {			var dim:String = (tf.multiline)? 'height' : 'width'			var textDim:String = (tf.multiline)? 'textHeight' : 'textWidth';			var f:TextFormat;			tf.autoSize = 'none'			tf.wordWrap = false						if(textBoxSizeDictionary[tf.parent.name+tf.name+'W'] == null){				textBoxSizeDictionary[tf.parent.name+tf.name+'W'] = int(tf.width)				textBoxSizeDictionary[tf.parent.name+tf.name+'H'] = int(tf.height)			} else {				tf.width = textBoxSizeDictionary[tf.parent.name+tf.name+'W']				tf.height = textBoxSizeDictionary[tf.parent.name+tf.name+'H']			}						tf.htmlText = str;			f = tf.getTextFormat();			f.size = maxSize;			tf.setTextFormat(f)								while(tf.textHeight > tf.height || tf.textWidth > tf.width){				f.size = int(f.size) - 1;				tf.setTextFormat(f);			}						tf.setTextFormat(f);			var align:String = tf.getTextFormat().align || TextFieldAutoSize.LEFT			tf.autoSize = align		}//-- LOAD IMAGES ------------------------------------------------------------------//				public static function scaleAndCenterImage(b:Bitmap, maxWidth:uint, maxHeight:uint, horizontalSpace:uint, verticalSpace:uint):void{			if(b.width/b.height > maxWidth/maxHeight && b.width > maxWidth){				b.width = maxWidth;				b.scaleY = b.scaleX			}else if(b.height > maxHeight){				b.height = maxHeight				b.scaleX = b.scaleY			}									b.smoothing = true;			b.x = int(.5*(horizontalSpace - b.width))			b.y = int(.5*(verticalSpace - b.height))		}		public function loadImageInto(mc:MovieClip, img:String, scale:Number = 1):void{			var loader:Loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoadCompleteHandler);			loader.load(new URLRequest(imageFolder + img));			containerDict[loader] = mc			mc.scaleX = mc.scaleY = scale;			imgNum++;		}				private function imageLoadCompleteHandler(e:Event):void{			var l:Loader = e.target.loader;			var h:MovieClip = containerDict[l] as MovieClip;			var bitmap:Bitmap = Bitmap(l.content); 			h.dispatchEvent(new Event(IMAGE_LOAD_COMPLETE))			scaleAndCenterImage(bitmap, h.width, h.height, h.width, h.height)			h.addChild(bitmap);		}				public function removeChars(str:String, chars:String):String {			var l:uint = str.length;			var retString:String = '';			for (var i:int = 0; i < l; i++) {				if(chars.indexOf(str.charAt(i)) == -1){					retString += str.charAt(i);									}			}						return retString;		}	//-- DATA STORAGE ------------------------------------------------------------------//		public function stopDSAlert(n:String):void{			if(live)pointroll.datastorage.stopAlert(n)		}				public function checkDSVarOnInterval(n:String, interval:int, funct:Function):void{			if(live)pointroll.datastorage.checkOnInterval(n, interval, funct)		}				public function setDSVar(n:String, v:String):void{			trace('DATA STORAGE: ', n, '>>', v)			if(live){				pointroll.datastorage.setExternalVariable(n, v)			}		}				public function getDSVar(n:String, testValue:String = ''):String{			if(live){				trace('getDSVar:', pointroll.datastorage.readExternalVariable(n))				return pointroll.datastorage.readExternalVariable(n);			} else {				return testValue;			}		}		//-- CLOSE / PIN ------------------------------------------------------------------//		public function unpinPanel():void{			if(!main_mc.stage.hasEventListener(Event.MOUSE_LEAVE)){				main_mc.stage.addEventListener(Event.MOUSE_LEAVE, close);			}						if(pinned){				pointroll.panel.unPinPanel();				pinned = false;			}		}				public function pinPanel():void{			if(main_mc.stage.hasEventListener(Event.MOUSE_LEAVE)){				main_mc.stage.removeEventListener(Event.MOUSE_LEAVE, close);			}						if(!pinned){				pointroll.panel.pinPanel();				pinned = true;			}		}				public function close(e:Event = null):void{			unpinPanel()						if(isAutoPanel)alertPanelClosed()						if(pushDistance == 0){				pointroll.panel.closePanel();						}else{				pointroll.panel.pushDownPanel(0, -pushDistance)				setTimeout(pointroll.panel.closePanel, 100)			}						clearTimeout(autoPanelTimeout)		}								private static function log(m:String):void{			trace(PRE + m);		}	}}