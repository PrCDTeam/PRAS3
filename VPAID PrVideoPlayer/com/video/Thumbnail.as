package com.video {	import flash.display.MovieClip;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.display.Bitmap;	import flash.events.MouseEvent;	import flash.display.Sprite;	import com.greensock.TweenLite;	import com.greensock.easing.Strong;	import flash.text.Font;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import com.PrUtils	import flash.utils.getDefinitionByName;		public class Thumbnail extends MovieClip {				public static const	LOAD_COMPLETE:String = 'loadComplete';			private var mask_mc:Sprite = new Sprite();		private var border_mc:Sprite = new Sprite()		private var loader:Loader = new Loader();		private var label_mc:Sprite;		private var label_txt:TextField;		private var labelFormat:TextFormat;		private var bitmap:Bitmap		private var play_mc:MovieClip				public var thumbWidth:uint		public var thumbHeight:uint		public var index:uint;				public function Thumbnail(index:uint, thumbWidth:uint, thumbHeight:uint, img:String) {			this.index = index;			this.thumbWidth = int(thumbWidth)			this.thumbHeight = int(thumbHeight);									buttonMode = true;			mouseChildren = false;						graphics.beginFill(0)			graphics.drawRect(0,0,thumbWidth, thumbHeight)			border_mc.graphics.lineStyle(1, 0xcccccc)			border_mc.graphics.drawRect(.5,.5, thumbWidth - 1, thumbHeight - 1)			addChild(border_mc)			addEventListener(MouseEvent.MOUSE_OVER, overOutHandler)			addEventListener(MouseEvent.MOUSE_OUT, overOutHandler)//			addEventListener(MouseEvent.CLICK, overOutHandler)			try{				if(getDefinitionByName('PlayIcon') != null){					play_mc = new PlayIcon()					play_mc.x = play_mc.y = 3					addChild(play_mc)				}			}catch(e:Error){}						PrUtils.loadProxiedImage(loader, img, imageLoadCompleteHandler)		}				private function imageLoadCompleteHandler(e:Event):void{			bitmap = Bitmap(loader.content);						if(bitmap.width/bitmap.height < thumbWidth/thumbHeight){				bitmap.width = thumbWidth				bitmap.scaleY = bitmap.scaleX;			} else {				bitmap.height = thumbHeight;				bitmap.scaleX = bitmap.scaleY;			}						bitmap.y = int(.5*(thumbHeight - bitmap.height))			bitmap.x = int(.5*(thumbWidth - bitmap.width))			bitmap.smoothing = true;			mask_mc.graphics.beginFill(0)			mask_mc.graphics.drawRect(0,0,thumbWidth, thumbHeight)													addChildAt(mask_mc, 0)			addChildAt(bitmap, getChildIndex(border_mc));						bitmap.mask = mask_mc;						dispatchEvent(new Event(LOAD_COMPLETE));		}				public function addLabel(str:String, labelFormat:TextFormat, bgHex:uint = 0x000000):void{			if(!label_mc){				var labelHeight:int = (thumbHeight < 32)? thumbHeight-2 : 30;				label_mc = new Sprite()				label_mc.graphics.beginFill(bgHex, .9)								label_mc.graphics.drawRect(0,0,thumbWidth - 10, labelHeight)				label_mc.x = int(.5*(thumbWidth - label_mc.width))				label_mc.y = int((thumbHeight - label_mc.height))-1				label_mc.visible = false;				label_txt = new TextField()				label_txt.width = label_mc.width				label_txt.multiline = true;				label_txt.text = str;				label_txt.setTextFormat(labelFormat)				label_txt.y = Math.round(.5*(label_mc.height - label_txt.textHeight))-2				label_mc.addChild(label_txt)				addChild(label_mc)			}		}				public function select():void{			mouseEnabled = false;			if(play_mc)play_mc.visible = false;		}				public function deselect():void{			mouseEnabled = true;			if(play_mc)play_mc.visible = true;		}				private function overOutHandler(e:MouseEvent){			if(label_mc)label_mc.visible = (e.type == MouseEvent.MOUSE_OVER);		}	}	}