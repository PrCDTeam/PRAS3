package com.video {	import com.video.LoadingIcon	import com.pointroll.api.vpaid.plugins.media.VPAIDVideo;	import com.pointroll.api.vpaid.VPAID;	import com.pointroll.api.events.PrVideoEvent;	import com.pointroll.api.events.PrProgressEvent;	import com.pointroll.api.media.PointrollVideo;	import com.pointroll.api.media.definition.PointRollBasicVideoDefinition;	import com.pointroll.api.media.definition.PointRollAdvancedVideoDefinition;	import com.pointroll.api.utils.net.isLocal	import pointroll.initAd;	import pointroll.getFlashVar;	import pointroll.trackActivity;	import pointroll.info.getVideoDeliveryMethod				import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.media.Video;	import flash.utils.setTimeout;	import flash.utils.clearTimeout;	import flash.geom.Rectangle;	import flash.text.TextFormat;	import flash.utils.Dictionary;	public class PrVideoPlayer extends MovieClip {		public static const CONTROL_INTERACTION:String = 'controlInteraction';		public static const VIDEO_CLICK:String = 'videoClick';		public static const VIDEO_START:String = 'videoStart';		public static const VIDEO_END:String = 'videoEnd';				public var prVideo:PointrollVideo;		public var muted:Boolean = true;		public var videoNameArray:Array = new Array();		public var adFolder:String;		public var prAudioUI:int = 1;		public var prVideoUI:int = 0;					public var vidIndex:int = 0;		public var vidCount:int = 0;				public var videoObject:Video;		public var click_mc:Sprite = new Sprite()		public var mask_mc:Sprite = new Sprite();		public var playerWidth:uint;		public var playerHeight:uint;		public var videoWidth:uint;		public var videoHeight:uint;		public var currentVideoTime:Number;		public var currentVideoLength:Number;		public var actualVideoLength:Number				private var desc_mc:DescriptionWindow;		private var loading_mc:LoadingIcon;		private var hasControls:Boolean;		private var scrub:Boolean = false;		private var videoLaunched:Boolean = false;		private var videoComplete:Boolean = false;		private var videoPlaying:Boolean = false;		private var cycleVids:Boolean;		private var politeVid:Boolean;		private var politeTimeout:Number;		private var firstVideo:Boolean = true;		private var bg_mc:Sprite = new Sprite();		private var prVideoArray:Array = new Array();		private var milestoneDictionary:Dictionary = new Dictionary()		private var vpaid:VPAID;		private var originalVideoWidth:int;		private var originalVideoHeight:int;		private var live:Boolean;				public function PrVideoPlayer(main:MovieClip, playerWidth:int, playerHeight:int, videoWidth:int, videoHeight:int, adFolder:String, videoNames:Array, hasControls:Boolean = false, politeVid:Boolean = false, cycleVids:Boolean = false):void{			this.adFolder = pointroll.getFlashVar('adFolder') || adFolder;			live = (main.root.loaderInfo.url.indexOf('file') != 0)						this.videoWidth = (pointroll.getFlashVar('vidWidth'))? int(pointroll.getFlashVar('vidWidth')) : videoWidth			this.videoHeight = (pointroll.getFlashVar('vidHeight'))? int(pointroll.getFlashVar('vidHeight')) : videoHeight			this.playerWidth = (pointroll.getFlashVar('vidWidth'))? int(pointroll.getFlashVar('vidWidth')) : playerWidth			this.playerHeight = (pointroll.getFlashVar('vidWidth'))? int(pointroll.getFlashVar('vidWidth')) : playerHeight			videoNameArray = (pointroll.getFlashVar('vidNames'))? pointroll.getFlashVar('vidNames').split('|') : videoNames						originalVideoWidth = videoWidth;			originalVideoHeight = videoHeight;						for(var i:uint = 0; i < videoNameArray.length; i ++){				if(videoNameArray[i].indexOf('http://') > -1){					prVideoArray.push(new PointRollAdvancedVideoDefinition(adFolder, i+1, videoNameArray[i]));				}else{					prVideoArray.push(new PointRollBasicVideoDefinition(adFolder, videoNameArray[i], i+1))				}			}									videoObject = new Video(this.videoWidth, this.videoHeight);			videoObject.name = 'videoObject'			mask_mc.name = 'mask_mc';			vidCount = videoNameArray.length;			this.cycleVids = (vidCount == 1)? false : cycleVids;			this.politeVid = politeVid;			this.hasControls = hasControls;			loading_mc = new LoadingIcon(10, 0xffffff)			addEventListener(Event.ADDED_TO_STAGE, init);						setPlayerDimensions(this.playerWidth, this.playerHeight)			addChild(loading_mc);			addChildAt(videoObject,getChildIndex(getChildByName('bg_mc'))+1);			addChildAt(click_mc, getChildIndex(videoObject)+1)			addEventListener(Event.ADDED, keepLoadingIconOnTop)															prAudioUI = (pointroll.getFlashVar('prAudioUI'))? int(pointroll.getFlashVar('prAudioUI')) : 1			prVideoUI = (pointroll.getFlashVar('prVideoUI'))? int(pointroll.getFlashVar('prVideoUI')) : 0		}							public function init(e:Event):void{			removeEventListener(Event.ADDED_TO_STAGE, init);						loading_mc.animStop()			positionControls();			addEventListener(MouseEvent.CLICK, clickHandler);			//			//			for(var i:uint = 0; i < numChildren; i ++){//				trace(i, getChildAt(i).name)//			}						if(prVideoUI != 1 && vpaid == null)launchVideo(0);		}				private function positionControls():void{			if(hasControls){				this['prog_mc'].mouseEnabled = false;				this['largePlay_mc'].buttonMode = this['progBG_mc'].buttonMode = this['sound_mc'].buttonMode = this['playToggle_mc'].buttonMode = this['volToggle_mc'].buttonMode = true;				this['largePlay_mc'].visible = this['playToggle_mc'].pause_mc.visible = false;				this['largePlay_mc'].mouseChildren = this['playToggle_mc'].mouseChildren = this['sound_mc'].mouseChildren = this['volToggle_mc'].mouseChildren = false;								this['prog_mc'].graphics.clear()				this['progBG_mc'].graphics.clear()				this['prog_mc'].graphics.beginFill(0x52B5EE)				this['prog_mc'].graphics.drawRect(0,0,playerWidth,4)				this['progBG_mc'].graphics.beginFill(0xcccccc)				this['progBG_mc'].graphics.drawRect(0,0,playerWidth,4)				this['controlBG_mc'].width = playerWidth;				this['controlBar_mc'].width = playerWidth - this['playToggle_mc'].width - this['volToggle_mc'].width;					this['prog_mc'].y = this['progBG_mc'].y = playerHeight - this['prog_mc'].height;				this['scrub_mc'].y = this['prog_mc'].y-4				this['controlBG_mc'].y = this['playToggle_mc'].y = this['volToggle_mc'].y = this['controlBar_mc'].y = playerHeight - this['playToggle_mc'].height;				this['timer_txt'].y = this['controlBar_mc'].y				this['timer_txt'].x = this['controlBG_mc'].width - this['timer_txt'].width - 5				this['largePlay_mc'].y = this['sound_mc'].y = loading_mc.y 				this['largePlay_mc'].x = this['sound_mc'].x = loading_mc.x								addEventListener(MouseEvent.MOUSE_OVER, overOutHandler)				addEventListener(MouseEvent.MOUSE_OUT, overOutHandler)				dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT));			}		}				private function overOutHandler(e:MouseEvent):void{			var TorF:Boolean = (e.type == MouseEvent.MOUSE_OVER)			//this['scrub_mc'].visible =			this['controlBG_mc'].visible = this['timer_txt'].visible =  this['controlBar_mc'].visible = TorF			this['playToggle_mc'].visible = this['volToggle_mc'].visible = TorF;			//this['playToggle_mc'].y = this['volToggle_mc'].y = (TorF)? playerHeight - this['volToggle_mc'].height : playerHeight;			//this['prog_mc'].height = this['progBG_mc'].height = (TorF)? 4 : 4			this['prog_mc'].y = this['progBG_mc'].y = (TorF)? playerHeight - this['prog_mc'].height - this['playToggle_mc'].height : playerHeight - this['prog_mc'].height;			this['scrub_mc'].y = this['prog_mc'].y						if(desc_mc && TorF){				desc_mc.appear()			}else if(desc_mc){				desc_mc.hide()			}		}				private function clickHandler(e:MouseEvent):void{			switch(e.target.name){				case 'volToggle_mc':				case 'unmute_mc':				case 'mute_mc':				case 'sound_mc':					dispatchEvent(new Event(CONTROL_INTERACTION))					toggleVolume()					break;				case 'pause_mc':				case 'play_mc':				case 'playToggle_mc':				case 'largePlay_mc':					dispatchEvent(new Event(CONTROL_INTERACTION))					togglePlaying();					break;				default:					dispatchEvent(new Event(VIDEO_CLICK))					break;			}		}				public function seekTime(seconds:Number):void{//			currentVideoLength = actualVideoLength 			if(videoLaunched)prVideo.seek(seconds)			if(politeVid){				clearTimeout(politeTimeout)				politeTimeout = setTimeout(kill, (14.5 - seconds)*1000)			}		}		public function launchVideo(i:int = 0):void {			trace('LAUNCH VIDEO:', i, '-', videoNameArray[i])			politeVid = (politeVid)? (i == 0) : false						kill();			prVideo = new PointrollVideo(videoObject, pointroll.info.getVideoDeliveryMethod());			prVideo.progressTracker.addEventListener(PrProgressEvent.MEDIA_START, videoStartHandler);			prVideo.progressTracker.addEventListener(PrProgressEvent.MEDIA_COMPLETE, videoCompleteHandler);			prVideo.progressTracker.addEventListener(PrProgressEvent.MEDIA_PROGRESS, videoProgressHandler);			prVideo.addEventListener(PrVideoEvent.REPLAY, replayRestartHandler)			prVideo.addEventListener(PrVideoEvent.RESTART, replayRestartHandler)						if(milestoneDictionary[i] != null){				prVideo.progressTracker.customMilestones = milestoneDictionary[i][0];				prVideo.progressTracker.addEventListener(PrProgressEvent.CUSTOM_MILESTONE,  milestoneDictionary[i][1])			}						prVideo.progressTrackingEnabled = !politeVid			prVideo.playVideo(prVideoArray[i])			loading_mc.animGo()			videoLaunched = true;			vidIndex = i;							if(vpaid){				var vpaidVideo: VPAIDVideo  = new VPAIDVideo(prVideo);				vpaid.registerPlugin(vpaidVideo);							}									if(prAudioUI == 0 || !firstVideo){				turnSoundOn()			}else if (prAudioUI == 1){				turnSoundOff();			}									if(desc_mc)desc_mc.setDescription(vidIndex)									if(hasControls){				this['playToggle_mc'].mouseEnabled = this['sound_mc'].mouseEnabled = this['volToggle_mc'].mouseEnabled = this['progBG_mc'].mouseEnabled = false;				this['largePlay_mc'].visible = false;				this['prog_mc'].scaleX = .001;			}				}				public function setMilestones(vidIndex:uint, arr:Array, handler:Function):void{			if(vidIndex < videoNameArray.length){				milestoneDictionary[vidIndex] = [arr, handler]			} else {				throw Error("When calling setMilestones(), 'vidIndex' parameter must be within the bounds of videoNameArray.length.")			}		}				private function videoProgressHandler(e:PrProgressEvent):void{			currentVideoTime = e.currentTime; 			var t:uint = currentVideoLength - currentVideoTime;			var playedPct:Number = currentVideoTime/currentVideoLength						if(hasControls){				var s:String = String(int(t % 60));				var m:String = (String((t - int(s))/60));				if(s.length == 1) s = '0'+s;				if(m.length == 1) m = '0'+m;								this['timer_txt'].text = m+':'+s								this['prog_mc'].scaleX = playedPct;				if(this['prog_mc'].width > this['scrub_mc'].width * .5 && this['prog_mc'].width < playerWidth - this['scrub_mc'].width * .5){					this['scrub_mc'].x = this['prog_mc'].width - this['scrub_mc'].width *.5				} else if(this['prog_mc'].width < this['scrub_mc'].width * .5){					this['scrub_mc'].x = 0				} else {					this['scrub_mc'].x = playerWidth - this['scrub_mc'].width				}			}						if(vpaid){				vpaid.adRemainingTime = uint(t);			}		}				private function replayRestartHandler(e:PrVideoEvent):void{			videoStartHandler(null);						//prVideo.progressTracker.removeEventListener(PrProgressEvent.CUSTOM_MILESTONE, milestoneHandler)			//prVideo.progressTracker.resetCustomMilestones();		}				private function videoStartHandler(e:PrProgressEvent):void {			firstVideo = false;			loading_mc.animStop()						if(hasControls){				this['sound_mc'].visible = (prAudioUI == 1);								this['progBG_mc'].addEventListener(MouseEvent.MOUSE_DOWN, startScrub);				this['playToggle_mc'].mouseEnabled = this['sound_mc'].mouseEnabled = this['volToggle_mc'].mouseEnabled = this['progBG_mc'].mouseEnabled = true;				this['playToggle_mc'].play_mc.visible = this['largePlay_mc'].visible = false;				this['playToggle_mc'].pause_mc.visible = true;				this['scrub_mc'].x = 0				this['prog_mc'].scaleX = .001;			}						videoPlaying = true;			videoComplete = false;					if(vpaid)politeVid = false;						if(e){				currentVideoLength = (politeVid)? 14.5 : e.totalTime;				actualVideoLength = e.totalTime;			}			clearTimeout(politeTimeout);			if(politeVid && prVideoUI == 0){				politeTimeout = setTimeout(kill, 14500);			}						if(e != null){				dispatchEvent(new Event(VIDEO_START));			}		}		private function videoCompleteHandler(e:PrProgressEvent = null):void {			loading_mc.animStop()						if(hasControls){				this['progBG_mc'].removeEventListener(MouseEvent.MOUSE_DOWN, startScrub);				removeEventListener(MouseEvent.MOUSE_UP, stopScrub);				this['playToggle_mc'].play_mc.visible = true				this['playToggle_mc'].pause_mc.visible = false;				this['largePlay_mc'].visible = (e != null);				this['sound_mc'].visible = false			}						videoPlaying = false;			videoComplete = true;						if(e != null && cycleVids && !politeVid){				launchNextVideo();			}						if(e != null){				dispatchEvent(new Event(VIDEO_END));			}		}				private function startScrub(e:MouseEvent):void{			addEventListener(MouseEvent.MOUSE_UP, stopScrub);			scrub = true;		}				private function stopScrub(e:MouseEvent):void{			removeEventListener(MouseEvent.MOUSE_UP, stopScrub);			var pct:Number = this['progBG_mc'].mouseX / this['progBG_mc'].width			var sec:Number = pct * currentVideoLength			seekTime(sec)			scrub = false;		}				private function togglePlaying():void{					if(!videoLaunched){				launchVideo(0);			}else if(politeVid && !videoPlaying){				launchFullVideo();			}else if(videoComplete || (!videoPlaying && prAudioUI == 1)){				restartVideo();			}else if(videoPlaying){				pauseVideo();			}else{				playVideo();			}		}				public function playVideo(e:Event = null):void{			trace('PLAY VIDEO')			if(hasControls){				this['playToggle_mc'].pause_mc.visible = true;				this['playToggle_mc'].play_mc.visible = this['largePlay_mc'].visible = false;			}			videoPlaying = true;			prVideo.resume();		}				public function pauseVideo(e:Event = null):void{			trace('PAUSE VIDEO')			if(hasControls){				this['playToggle_mc'].pause_mc.visible = false;				this['playToggle_mc'].play_mc.visible = true;				this['largePlay_mc'].visible = !this['sound_mc'].visible;			}			videoPlaying = false;			prVideo.pause()		}				public function restartVideo():void{			loading_mc.animGo()			if(hasControls){				this['playToggle_mc'].pause_mc.visible = true;				this['playToggle_mc'].play_mc.visible = this['largePlay_mc'].visible = false;			}										if(prAudioUI == 1){				prVideo.restartWithSound()				turnSoundOn(true)			} else {				prVideo.restart();			}		}					private function toggleVolume(e:Event = null):void{			if(prAudioUI == 1){				prVideo.restartWithSound();				turnSoundOn(true)			}else if(muted){				turnSoundOn()			}else{				turnSoundOff();			}		}				public function turnSoundOn(justControls:Boolean = false):void{			prAudioUI = 0;			muted = false;						if(prVideo && !justControls){				prVideo.unmute()			}									if(hasControls){				this['volToggle_mc'].vibes_mc.visible = true				this['sound_mc'].visible = false			}		}				private function turnSoundOff():void{			muted = true;						if(prVideo){				prVideo.mute()			}						if(hasControls){				this['volToggle_mc'].vibes_mc.visible = false			}		}		private function launchFullVideo():void{			politeVid = false;						if(muted)turnSoundOn();						launchVideo(0);		}				public function launchPrevVideo():void{			vidIndex = (vidIndex > 0)? vidIndex - 1 : vidCount			launchVideo(vidIndex)		}				public function launchNextVideo():void {			vidIndex = (vidIndex < vidCount)? vidIndex + 1 : 0			launchVideo(vidIndex)		}				public function kill(e:Event = null):void{			if(prVideo){				trace('the video is dead')				prVideo.destroy();				prVideo = null;				videoCompleteHandler()			}			videoLaunched = false		}				public function setVideoDimensions(W:uint, H:uint):void{			videoObject.width = videoWidth = W;			videoObject.height = videoHeight = H;			centerVideo();		}				public function setPlayerDimensions(W:uint, H:uint):void{			playerWidth = W			playerHeight = H;			drawBG(W, H)			centerVideo();		}				public function setDescriptions(descriptionArray:Array, titleFormat:TextFormat, subHeadFormat:TextFormat, descFormat:TextFormat, bgHex:uint = 0x000000):void{			if(!desc_mc){				desc_mc = new DescriptionWindow(this, descriptionArray, titleFormat, subHeadFormat, descFormat, bgHex)				addChildAt(desc_mc, getChildIndex(click_mc))			}		}				public function disableDescriptions():void{			desc_mc = null;		}				private function drawBG(W:int, H:int, drawBorder:Boolean = false):void{			if(drawBorder){				var border_mc:Sprite = new Sprite()				border_mc.graphics.lineStyle(1, 0xcccccc)				border_mc.graphics.moveTo(.5,.5)				border_mc.graphics.lineTo(playerWidth - .5, .5)				border_mc.graphics.lineTo(playerWidth - .5, playerHeight - .5)				border_mc.graphics.lineTo(.5, playerHeight - .5)				border_mc.graphics.lineTo(.5,.5)				addChild(border_mc)			}			click_mc.name = 'click_mc'			bg_mc.name = 'bg_mc'			if(!getChildByName('bg_mc')){				click_mc.graphics.beginFill(0, 0)				click_mc.graphics.drawRect(0,0,W,H)				click_mc.buttonMode = true;				bg_mc.graphics.clear();				bg_mc.graphics.beginFill(0x000000, 1);				bg_mc.graphics.drawRect(0,0,W,H)				addChildAt(bg_mc, 0);			} else {				click_mc.width = bg_mc.width = W				click_mc.height = bg_mc.height = H			}		}						private function centerVideo():void{			videoObject.x = int(.5*(playerWidth - videoWidth))			videoObject.y = int(.5*(playerHeight - videoHeight))			loading_mc.x = int(playerWidth *.5);			loading_mc.y = int(playerHeight *.5);						if((videoWidth > playerWidth || videoHeight > playerHeight)){				mask_mc.graphics.clear()				mask_mc.graphics.beginFill(0)				mask_mc.graphics.drawRect(0,0,playerWidth, playerHeight)				addChildAt(mask_mc, 0)				mask = mask_mc;			} else if(getChildByName('mask_mc')){				removeChild(getChildByName('mask_mc'))				mask = null			}		}				public function nudgeVideo(XorY:String, dist:int):void{			if(videoObject && (XorY == 'x' || XorY == 'y')){				videoObject[XorY] += dist;			}		}				private function keepLoadingIconOnTop(e:Event):void{			if(loading_mc)setChildIndex(loading_mc, numChildren - 1)		}					//		VPAID 		public function set vpaidObject(vpaid:VPAID):void{			this.vpaid = vpaid;			turnSoundOn();			trace('IS LIVE:', live)						if (live) {				vpaid.addEventListener (VPAID.INIT, vpaidInitHandler, false, 0, true);			} else {				vpaidInitHandler();			}		}		private function vpaidInitHandler (e:Event = null):void {			trace('VPAID INIT')			vpaid.removeEventListener(VPAID.INIT, vpaidInitHandler);			vpaid.addEventListener(VPAID.START, vpaidStartHandler, false, 0, true);			vpaid.addEventListener(VPAID.RESIZE, vpaidResizeHandler, false, 0, true);			vpaid.addEventListener(VPAID.PAUSE, pauseVideo, false, 0, true);			vpaid.addEventListener(VPAID.RESUME, playVideo, false, 0, true);			vpaid.addEventListener(VPAID.VOLUME_CHANGE, vpaidVolumeChangeHandler, false, 0, true)													if (live) {				vpaid.readyToPlay();			} else {				vpaidStartHandler();			}		}				private function vpaidVolumeChangeHandler(e:Event):void{			if(vpaid && prVideo){				prVideo.volume = vpaid.adVolume								if(vpaid.adVolume == 0){					turnSoundOff();				} else {					turnSoundOn();				}			}		}			private function vpaidStartHandler(e:Event = null):void {			trace('VPAID START')			vpaidResizeHandler()			launchVideo(0)		}				private function vpaidResizeHandler(e:Event = null):void {			trace('VPAID RESIZE - VIEW MODE:', vpaid.viewMode)//			width = vpaid.width;//			scaleY = scaleX;			var w:int = vpaid.width;			var h:int = vpaid.height;			var s:Number = w/originalVideoWidth			setPlayerDimensions(w, h)			setVideoDimensions(w, int(s*originalVideoHeight))			positionControls()		}	}}