package  com.video{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import com.greensock.TweenLite	import com.greensock.easing.Strong;	import flash.utils.Dictionary;	import com.ScrollBar;	import pointroll.getFlashVar;	import flash.text.Font;	import flash.text.TextFormat;	import pointroll.trackActivity;		public class ThumbnailGallery extends MovieClip{		public static const THUMB_SELECTED:String = 'thumbSelected';				public var activeThumbIndex:uint;		public var activeThumb:Thumbnail;				private var imageNameArray:Array = new Array;		private var holder_mc:Sprite = new Sprite();		private var mask_mc:Sprite = new Sprite()		private var next_mc:MovieClip;		private var prev_mc:MovieClip;		private var visibleThumbs:uint;		private var galleryWidth:uint		private var galleryHeight:uint		private var thumbWidth:uint;		private var thumbHeight:uint;		private var loading_mc:LoadingIcon;		private var thumbsReady:uint = 0;		private var totalThumbDimension:uint = 0		private var spacer:int = -1;		private var verticalGallery:Boolean;		private var useScrollBar:Boolean;		private var allThumbsReady:Boolean = false;		private var arrowsAssigned:Boolean = true;		private var thumbDim:String		private var galleryDim:String		private var coord:String		private var maxThumbnails:String;		private var slotDist:int;		private var arrowSlideMultiplierDictionary:Dictionary = new Dictionary()		public function ThumbnailGallery(imageNameArray:Array, galleryWidth:uint, galleryHeight:uint, imageDimensionScale:Number = .9, useScrollBar:Boolean = false) {//			maxThumbnails = pointroll.getFlashVar('maxThumbnails') || '6'			this.galleryWidth = galleryWidth;			this.galleryHeight = galleryHeight;			this.imageNameArray = imageNameArray;			this.useScrollBar = useScrollBar			mask = mask_mc;			holder_mc.alpha = .5			holder_mc.mouseChildren = holder_mc.mouseEnabled = false;			mask_mc.graphics.beginFill(0xff0000)			mask_mc.graphics.drawRect(0,0, galleryWidth, galleryHeight)						loading_mc = new LoadingIcon(10, 0xffffff)			loading_mc.x = int(galleryWidth * .5);			loading_mc.y = int(galleryHeight * .5);						verticalGallery = (galleryHeight > galleryWidth)						if(verticalGallery){				thumbHeight =  int(galleryWidth * imageDimensionScale);				thumbWidth = galleryWidth				thumbDim = 'thumbHeight'				galleryDim = 'galleryHeight'				coord = 'y';			} else {				thumbHeight = galleryHeight;				thumbWidth = int(galleryHeight * imageDimensionScale)				thumbDim = 'thumbWidth'				galleryDim = 'galleryWidth'				coord = 'x'			}						//			imageNameArray.splice(int(maxThumbnails), imageNameArray.length)						for(var i:uint = 0; i < imageNameArray.length; i++){				var t:Thumbnail = new Thumbnail(i, thumbWidth, thumbHeight, imageNameArray[i])				t.addEventListener(Thumbnail.LOAD_COMPLETE, thumbReadyHandler)				holder_mc.addChild(t)			}						addChildAt(mask_mc, 0)			addChildAt(holder_mc, 0)			addChild(loading_mc)						positionThumbs()			loading_mc.animGo();		}				private function positionThumbs():void{										for(var i:int = 0; i < imageNameArray.length; i++){				if(spacer == -1){					totalThumbDimension += this[thumbDim]					if(totalThumbDimension > this[galleryDim]){						spacer = (this[galleryDim] - (totalThumbDimension - this[thumbDim]))/(i-1)						visibleThumbs = i						i = 0					}				} else {					var t:Thumbnail = Thumbnail(holder_mc.getChildAt(i))					slotDist = this[thumbDim] + spacer					t[coord] = i*(slotDist)				}			}		}				private function thumbReadyHandler(e:Event):void{			thumbsReady++;			e.target.addEventListener(MouseEvent.CLICK, thumbClickHandler)			if(thumbsReady == imageNameArray.length){					activeThumb = Thumbnail(holder_mc.getChildAt(0))				activeThumb.select()				holder_mc.alpha = 1;				holder_mc.mouseChildren = holder_mc.mouseEnabled = true;				allThumbsReady = true;				if(arrowsAssigned)arrowSlideComplete()				if(useScrollBar)buildScrollBar()				loading_mc.animStop()			}		}				private function thumbClickHandler(e:MouseEvent):void{			if(activeThumb)activeThumb.deselect();			activeThumb = Thumbnail(e.target)			activeThumbIndex = activeThumb.index;			activeThumb.select()			dispatchEvent(new Event(THUMB_SELECTED))		}				private function arrowSlide(e:MouseEvent):void{			var newSlot:int = currSlot + arrowSlideMultiplierDictionary[e.target] * visibleThumbs			prev_mc.alpha = next_mc.alpha = 1						if(newSlot <= 0){				newSlot = 0				prev_mc.alpha = .5			}						if(newSlot >= imageNameArray.length - visibleThumbs){				newSlot = imageNameArray.length  - visibleThumbs					next_mc.alpha = .5			}								if(currSlot != newSlot){				next_mc.removeEventListener(MouseEvent.CLICK, arrowSlide)				prev_mc.removeEventListener(MouseEvent.CLICK, arrowSlide)				if(verticalGallery){					TweenLite.to(holder_mc, .5, {y:-(newSlot * slotDist), ease:Strong.easeOut, onComplete:arrowSlideComplete})				} else {					TweenLite.to(holder_mc, .5, {x:-(newSlot * slotDist), ease:Strong.easeOut, onComplete:arrowSlideComplete})				}				var a:int = (newSlot > currSlot)? 1 : 2;				pointroll.trackActivity(a)			}		}				private function get currSlot():int{			return Math.abs(holder_mc[coord]/slotDist)		}				private function arrowSlideComplete():void{			if(next_mc)next_mc.addEventListener(MouseEvent.CLICK, arrowSlide)			if(prev_mc)prev_mc.addEventListener(MouseEvent.CLICK, arrowSlide)		}						private function buildScrollBar():void{			var sb:ScrollBar = new ScrollBar(this, holder_mc, mask_mc, true, verticalGallery)		}				public function addThumbLabels(labelArray:Array, labelFormat:TextFormat, bgHex:uint = 0x000000):void{			for(var i:uint = 0; i < labelArray.length; i++){				var t:Thumbnail = Thumbnail(holder_mc.getChildAt(i))				t.addLabel(labelArray[i], labelFormat, bgHex)			}		}				public function setScrollButtons(next_mc:MovieClip, prev_mc:MovieClip):void{			if(!useScrollBar){				this.prev_mc = prev_mc;				this.next_mc = next_mc;				prev_mc.alpha = .5				arrowSlideMultiplierDictionary[next_mc] = 1				arrowSlideMultiplierDictionary[prev_mc] = -1				next_mc.mouseChildren = prev_mc.mouseChildren = false				next_mc.buttonMode = prev_mc.buttonMode = true				if(allThumbsReady)arrowSlideComplete()				arrowsAssigned = true;			} else {				throw Error('Arrow buttons may not be assigned if a scrollbar has already been constructed.  To remove, set "useScrollBar" parameter to "false" upon instantiation of ThumbnailGallery')			}		}	}}