package com.pointroll.memory{	import com.pointroll.memory.Card;	import com.pointroll.memory.events.CardEvents;	import com.pointroll.memory.events.MemoryEvents;		import com.pointroll.memory.sound.SoundEngine;	import pointroll.info.getFolderPath;	import flash.display.MovieClip;	import com.greensock.TweenLite;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.MouseEvent;	import flash.events.Event;		import pointroll.*;	public class Memory extends MovieClip {		private var _board:Array;		private var _selected:Array;		private var _positions:Array;		private var _matchCards:int;		private var _totalFaces:int;		private var _rows:int;		private var _columns:int;		private var _gameCounter:int;		private var _howManyMatches:int = 6;		private var _timer:Timer;		private var _infoObject:Object;				private var _gameSound:SoundEngine;				private var _soundTrackPath:String;				public function Memory() {			buildGame();			_soundTrackPath = pointroll.info.getFolderPath() + "ding.mp3";			//enableAllCards(false);		}		public function startGame():void {			var _length:int = _board.length;			for (var i:int = 0; i < _length; i++) {				_board[i].alpha = 1;				_board[i].back.rotationY = -90;				_board[i].back.alpha = 0;				_board[i].front.alpha = .5;				_board[i].cardFrontVisibile = true;				_board[i].cardBackVisibile = true;			}			enableAllCards(true);			_gameSound = SoundEngine.getInstance();			_gameSound.playSound(_soundTrackPath,0,-1);			_gameSound.setVolume(0,_soundTrackPath);		}		public function resetGame():void {			var _length:int = _board.length;			_gameCounter = 0;			for (var i:int = 0; i < _length; i++) {				if (_board[i]) {					_board[i].front.rotationY = 0;					_board[i].front.alpha = 0;					_board[i].isSelected = false;					_board[i].cardFrontVisibile = false;					_board[i].cardBackVisibile = false;					_board[i].cardBorderVisible = false;					_board[i].resetCard();					_board[i].alpha = 1;				}			}			//TweenLite.killTweensOf(this);			howToPlay.visible = true;			messaging.y = 416;			facebookBtn.y = 420;			joinUsFacebook.scaleX = joinUsFacebook.scaleY = .5;			joinUsFacebook.y = 508;			smileTiles.x = 42;			cerealBox.x = -200;			allSmiles.visible = endFrame.visible = false;			allSmiles.alpha = endFrame.alpha = 0;			enableAllCards(false);			shuffleBoard();			//buildGame();		}		public function killAllAnimation():void {			TweenLite.killTweensOf(allSmiles);			TweenLite.killTweensOf(messaging);			TweenLite.killTweensOf(facebookBtn);			TweenLite.killTweensOf(joinUsFacebook);			TweenLite.killTweensOf(smileTiles);			TweenLite.killTweensOf(cerealBox);			TweenLite.killTweensOf(endFrame);		}		private function buildGame():void {			var _length:int;			var _counter:int = 1;			_gameCounter = 0;			allSmiles.visible = endFrame.visible = false;			allSmiles.alpha = endFrame.alpha = 0;			_infoObject = new Object();			_board = new Array();			_selected = new Array();			_positions = new Array();			_timer = new Timer(500,1);			_rows = 3;			_columns = 4;			_matchCards = 2;			_totalFaces = _rows * _columns / 2;			_length = (_rows * _columns);			_timer.addEventListener(TimerEvent.TIMER, onTimerComplete);			for (var i:int = 0; i < _length; i++) {				_board[i] = this["card" + (i + 1)];				_board[i].cardFrontVisibile = false;				_board[i].cardBackVisibile = false;				_board[i].cardBorderVisible = false;				_board[i].tileFace = _counter;				_board[i].cardNumber = i;				_board[i].setCardFace();				_board[i].addEventListener(CardEvents.ON_CARD_CLICK,onCardFlip);				_board[i].addEventListener(CardEvents.ON_CARD_FLIP_COMPLETE,onCardFlipComplete);				_positions[i] = new Object();				_positions[i].x = _board[i].xPosition;				_positions[i].y = _board[i].yPosition;				if (_counter%_totalFaces==0) {					_counter = 1;				}				else {					_counter++;				}			}			shuffleBoard();			joinUsFacebook.buttonMode = joinUsFacebook.useHandCursor = true;			facebookBtn.addEventListener(MouseEvent.CLICK, onGameBoardEvents);			howToPlay.startGame.addEventListener(MouseEvent.CLICK, onGameBoardEvents);			joinUsFacebook.addEventListener(MouseEvent.CLICK, onGameBoardEvents);		}		private function pushSelectedCards(c:Card):void {			_selected.push(c);			if (_selected.length == _matchCards) {				enableAllCards(false);			}		}		private function checkMatch():void {			if (_selected.length == _matchCards) {				trace("checkMatch: " + _selected[0].tileFace + " " +_selected[1].tileFace);				if (_selected[0].tileFace == _selected[1].tileFace) {					playMatchSound();					matchGlowOn(_selected[0]);					matchGlowOn(_selected[1]);					_selected[0].cardEnabled = _selected[1].cardEnabled = false;					_gameCounter++;					if (_gameCounter >= _howManyMatches) {						_infoObject.eventName = "onGameOver";						showAllTiles();						playGameOverAnimation();						enableAllCards(false);						dispatchEvent(new MemoryEvents(MemoryEvents.ON_MEMORY_GAME_EVENT,_infoObject));					}					_selected = new Array();				}				else {					_selected[0].cardAlpha = .5;					_selected[1].cardAlpha = .5;					_selected[0].Flip();					_selected[1].Flip();					_selected = new Array();				}			}			enableAllCards(true);		}		private function playMatchSound():void {						//embedSound.play();			_gameSound.playSound("Ding");			_gameSound.setVolume(.5,"Ding");		}		private function showAllTiles():void {			var _length:int = _board.length;			for (var i:int = 0; i < _length; i++) {				if (! _board[i].isSelected) {					_board[i].Flip();				}			}		}		private function playGameOverAnimation():void {			var _length:int = _board.length;			for (var i:int = 0; i < _length; i++) {				TweenLite.to(_board[i],1,{alpha:.4,delay:1.5});			}			allSmiles.visible = endFrame.visible = true;			TweenLite.to(allSmiles,1,{alpha:1,delay:1.5});			TweenLite.to(messaging,.5,{y:500,delay:1.5});			TweenLite.to(facebookBtn,.5,{y:500,delay:1.5});			TweenLite.to(joinUsFacebook,.5,{scaleX:.5,scaleY:.5});			TweenLite.to(joinUsFacebook,.5,{y:446,scaleX:1,scaleY:1,delay:1.7});			TweenLite.to(smileTiles,.5,{x:-220,delay:1.7});			TweenLite.to(cerealBox,.5,{x:74,delay:2});			TweenLite.to(allSmiles,1,{alpha:0,delay:4});			TweenLite.to(endFrame,1,{alpha:1,delay:4.6});		}		private function shuffleBoard():void {			var _length:int = _board.length;			var _temp:Array = _board;			_temp = randomize(_temp);			for (var i:int = 0; i < _length; i++) {				//trace(_temp[i].xPosition + " " + _positions[i].x);				_board[i].xPosition = _positions[i].x;				_board[i].yPosition = _positions[i].y;				_board[i].cardNumber = i;			}		}		private function randomize(array:Array):Array {			var temp:Object;			var tempOffset:int;			for (var i:int = array.length - 1; i >= 0; i--) {				tempOffset = Math.random() * i;				temp = array[i];				array[i] = array[tempOffset];				array[tempOffset] = temp;			}			return array;		}		private function enableAllCards(b:Boolean):void {			var _length:int = _board.length;			for (var i:int = 0; i < _length; i++) {				_board[i].cardEnabled = b;			}		}		private function matchGlowOn(clip:MovieClip):void {			var currentMC:MovieClip = clip;			TweenLite.to(currentMC, .3, {colorMatrixFilter:{saturation:1, brightness:1.1}});			TweenLite.to(currentMC, 1, {glowFilter:{color:0xffff00, alpha:1, blurX:10, blurY:10},onComplete:matchGlowOff,onCompleteParams:[currentMC]});		}		private function matchGlowOff(clip:MovieClip):void {			var currentMC:MovieClip = clip;			TweenLite.to(currentMC, 1, {colorMatrixFilter:{brightness:1}});			TweenLite.to(currentMC, 1, {glowFilter:{color:0xffff00, alpha:0, blurX:0, blurY:0}});		}		// EVENTS		private function onCardFlip(e:CardEvents):void {			//trace("onCardFlip: " + e.params.id + " " +e.params.cardNumber);			pushSelectedCards(_board[e.params.cardNumber]);		}		private function onCardFlipComplete(e:CardEvents):void {			//trace("onCardFlipComplete: " + e.params.id + " " +e.params.cardNumber);			if (_selected.length >= 2) {				_timer.start();			}		}		private function onTimerComplete(e:TimerEvent):void {			checkMatch();		}		private function onGameBoardEvents(e:MouseEvent):void {			switch (e.target) {				case howToPlay.startGame :					_infoObject.eventName = "onStartGame";					howToPlay.visible = false;					dispatchEvent(new MemoryEvents(MemoryEvents.ON_MEMORY_GAME_EVENT,_infoObject));					break;				case facebookBtn :					_infoObject.eventName = "onFaceBook";					dispatchEvent(new MemoryEvents(MemoryEvents.ON_MEMORY_GAME_EVENT,_infoObject));					break;				case joinUsFacebook :					_infoObject.eventName = "onJoinUsFaceBook";					dispatchEvent(new MemoryEvents(MemoryEvents.ON_MEMORY_GAME_EVENT,_infoObject));					break;			}		}	}}