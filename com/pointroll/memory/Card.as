package com.pointroll.memory{	import flash.events.MouseEvent;	import flash.events.EventDispatcher;		import flash.display.MovieClip;		import com.pointroll.memory.events.CardEvents;		import com.greensock.TimelineMax;	import com.greensock.TweenMax;	import com.greensock.easing.Linear;				public class Card extends MovieClip{		private var _id:int;		private var _cardNumber:int;				private var _isSelected:Boolean;				private var _infoObject:Object;				private var _tl:TimelineMax;				private var _flipSpeed:Number = .3; 							public function Card() {			_infoObject = new Object();			_isSelected = false;			front.alpha = .5;			buttonMode = useHandCursor = true;			addEventListener(MouseEvent.CLICK, onCardEvent);			addEventListener(MouseEvent.ROLL_OVER, onCardEvent);			addEventListener(MouseEvent.ROLL_OUT, onCardEvent);			buildCardFlip();		}		private function buildCardFlip():void{			_tl = new TimelineMax({paused:true, onComplete:onFlipComplete});			_tl.append(TweenMax.to(front, _flipSpeed, {rotationY:90, visible:false, ease:Linear.easeNone}));			_tl.append(TweenMax.to(back, 0, {alpha:1, immediateRender:false}));			_tl.append(TweenMax.to(back, _flipSpeed, {rotationY:0, ease:Linear.easeNone}));						back.rotationY = -90;			back.alpha=0;		}		public function Flip():void{			trace("Flip() : " + isSelected);			if(isSelected){				isSelected = false;				_tl.tweenTo(0);			}			else{				isSelected = true;				trace("turn over card");				_tl.tweenTo(_tl.duration);			}								}		public function setCardFace():void{			back.gotoAndStop(_id);		}				public function resetCard():void{			_tl.tweenTo(0);		}				/*********************************************************************			public static const ON_CARD_ROLL_OVER:String="onCardRollOver";			public static const ON_CARD_CLICK:String = "onCardClick";		**********************************************************************/				private function onCardEvent(e:MouseEvent):void{			//trace("onCardEvent " +e.type + " " + isSelected);			switch(e.type){				case "click":					if(!isSelected){					 	Flip();						dispatchEvent(new CardEvents(CardEvents.ON_CARD_CLICK,_infoObject));					}				break;				case "rollOver":									if(!isSelected){						TweenMax.to(front,.3,{alpha:1});					}				 	 dispatchEvent(new CardEvents(CardEvents.ON_CARD_ROLL_OVER,_infoObject));				break;						case "rollOut":					if(!isSelected){						TweenMax.to(front,.3,{alpha:.5});					}								break;			}		}		private function onFlipComplete():void{			//if(!isSelected){				_infoObject.isSelected = isSelected;				 dispatchEvent(new CardEvents(CardEvents.ON_CARD_FLIP_COMPLETE,_infoObject));			//}		}				// GETTER AND SETTERS				public function get isSelected():Boolean{			return _isSelected;		}		public function set isSelected(b:Boolean):void{			_isSelected = b;		}		public function set cardNumber(index:int):void{			_infoObject.cardNumber = _cardNumber = index;		}		public function set tileFace(index:int):void{						_infoObject.id = _id = index;					}		public function set cardFrontVisibile(b:Boolean):void{			front.visible = b;		}				public function set cardBackVisibile(b:Boolean):void{			back.visible = b;		}		public function set cardBorderVisible(b:Boolean):void{			border.visible = b;		}				public function get tileFace():int{			return _id;		}				public function set cardAlpha(n:Number):void{			front.alpha = n;		}		public function set cardEnabled(b:Boolean):void{			mouseEnabled = mouseChildren = b;		}				public function get xPosition():Number{			return x;		}		public function set xPosition(n:Number):void{			x = n;		}		public function get yPosition():Number{			return y;		}		public function set yPosition(n:Number):void{			y = n;		}	}	}