package com.pointroll.data{	import com.pointroll.data.PRDataStorage;		import com.pointroll.events.PRDataScrapeEvents		import flash.events.EventDispatcher;	public class PRDataScrapper extends EventDispatcher {		//private var _scrappedVariable:String;		private var _scrapeVariables:Array;		private var _callBackFunction:Function;		public var _delay:Number = 100;		public var _frequency:Number;		public var _failedDelay:Number;		public var _count:int = 10;		public var _failedCount:int;				private var _counter:int = 0;		//$PLACEMENTID$		public function PRDataScrapper(scrappedName:Array,frequency:Number,failedCount:int=10) {			_scrapeVariables = scrappedName;			_frequency = frequency;			_failedCount = failedCount;			//_callBackFunction = callBackFunction;		}		public function load():void {			if (PRDataStorage.dataStorageIsAvailable()) {				getScrappedVariable();			}			else {				PRDataStorage.checkAvailability(_delay,_count,onCheckAvailability);				PRDataStorage.startTimer();			}		}		private function getScrappedVariable():void {			if (_scrapeVariables.length > 1) {				var _length:int = _scrapeVariables.length;				for (var i:int = 0; i < _length; i++) {					PRDataStorage.checkOnInterval(_scrapeVariables[i],_frequency,onCheckScrapeVariable);				}			}			else {				PRDataStorage.checkOnInterval(_scrapeVariables[0],_frequency,onCheckScrapeVariable);			}		}		private function onCheckScrapeVariable(name:String,value:String):void {			if (_counter >= _failedCount) {			   stopAllCheckOnInterval();			   dispatchEvent(new PRDataScrapeEvents(PRDataScrapeEvents.ON_DATA_SCRAPE_FAIL, new Object()));			}			else {				if(value != "" && value != null && value != "null"){							var _object:Object = new Object();					stopAllCheckOnInterval();					if (_scrapeVariables.length > 1) {						var _length:int = _scrapeVariables.length;						for (var i:int = 0; i < _length; i++){							if(value != "" && value != null){								trace("onCheckScrapperVariable: " + _scrapeVariables[i] + " = " + PRDataStorage.readExternalVariable(_scrapeVariables[i]));								_object[_scrapeVariables[i]] = PRDataStorage.readExternalVariable(_scrapeVariables[i]);							}						}					}					else{						_object[name] = value;												}					dispatchEvent(new PRDataScrapeEvents(PRDataScrapeEvents.ON_DATA_SCRAPE_LOAD, _object));									}			}			_counter++;		}		private function stopAllCheckOnInterval():void {			var _length:int = _scrapeVariables.length;			for (var i:int = 0; i < _length; i++) {				PRDataStorage.stopAlert(_scrapeVariables[i]);			}			_counter = 0;		}		private function onCheckAvailability(isAvailable:Boolean):void {			if (isAvailable) {				getScrappedVariable();			}			else {				dispatchEvent(new PRDataScrapeEvents(PRDataScrapeEvents.ON_DATA_SCRAPE_FAIL, new Object()));			}		}		// GETTERS & SETTERS 		public function set delay(t:Number):void {			_delay = t;		}		public function set count(t:Number):void {			_count = t;		}		public function get delay():Number {			return _delay;		}		public function get count():Number {			return _count;		}	}}