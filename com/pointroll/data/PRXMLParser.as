package com.pointroll.data{	import com.pointroll.interfaces.IPRDataParser;		import com.pointroll.events.PRParserEvents;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;		import com.pointroll.xml.XMLDataNode;		import flash.xml.XMLNode;	import flash.xml.XMLNodeType;	public class PRXMLParser extends EventDispatcher implements IPRDataParser{		private var _xml:XML;		private var _array:Array;				private var __thexml:XML;		public function PRXMLParser() {		}		public function parseData(sourceData:*,...args):void {			_xml = sourceData;			__thexml = new XML();			makeObj(null,_xml);		}		public function makeObj(xObj:*,obj:Object):void{			//----- Initialise objects			if (xObj == null) {				xObj = this.__thexml;			}//if(obj==null)  obj = {};			if (obj == null) {				obj = new XMLDataNode();			}			var a:Object,c:Object,nName:String,nType:Number,nValue:String;			//----- Add attributes to the object			for (a in xObj.attributes) {				obj[a] = xObj.attributes[a];				if (obj.attributes == undefined) {					obj.attributes = new Object  ;				}				obj.attributes[a] = obj[a];			}			//----- Build child nodes			for (c in xObj.childNodes) {				nName = xObj.childNodes[c].nodeName;				nType = xObj.childNodes[c].nodeType;				nValue = xObj.childNodes[c].nodeValue;				if (nType == 3) {					obj._value = nValue;					obj._type = 'text';				}				if (nType == 1 && nName != null) {					if (obj[nName] == null) {						obj[nName] = this.makeObj(xObj.childNodes[c],new XMLDataNode());					}					else if (obj[nName]._type != 'array') {						obj[nName] = [obj[nName]];						obj[nName]._type = 'array';					}					if (obj[nName]._type == 'array') {						obj[nName].unshift(this.makeObj(xObj.childNodes[c],new XMLDataNode()));					}				}			}			// Return object			//trace("returning obj = " + obj);			dispatchEvent(new PRParserEvents(PRParserEvents.ON_PARSER_COMPLETE,obj));			//return obj;		}		public function getParseData():* {			return _array;		}	}}