package com.pointroll.data{	import pointroll.datastorage.*;	import com.pointroll.interfaces.ISerializable;	import com.pointroll.interfaces.IPRDataStorage;	import flash.utils.Timer;	import flash.events.TimerEvent;	import com.pointroll.events.DataStorageEvents;		import flash.display.Sprite;		//import com.pointroll.utils.Base64;	//import flash.utils.ByteArray;	public class PRDataStorage extends Sprite implements IPRDataStorage,ISerializable {		private var _timer:Timer;		private var delay_n:Number;		private var count_n:Number;		public function PRDataStorage() {		}		public function checkAvailability(delay:Number,count:int):void {			delay_n = delay;			count_n = count;			_timer = new Timer(delay,count);			_timer.addEventListener("timer",onTimerEvent);		}		public function startTimer():void {			_timer.start();		}		public function dsAlertOnChange(name:String,frequency:Number,functionToCall:Function):void{			//DataStorage.alertOnChange(name,frequency,functionToCall);		}		public function dsCheckOnInterval(name:String,frequency:Number,callFunction:Function):void{			//DataStorage.checkOnInterval(name,frequency,callFunction);			pointroll.datastorage.checkOnInterval(name,frequency,callFunction);		}		public function stopAlert(name:String):void {			pointroll.datastorage.stopAlert(name);		}		public function serialize(a:Array):String {			/*var _length:int = a.length;			var _string:String = "";						for(var i:int = 0; i < _length; i++){				_string += a			}			return Base64.encode(bytes);*/			return null;		}		public function deserialize(s:String):String{			/*var result:ByteArray = Base64.decode(s);			result.position = 0;			return result.readObject();*/			return null;		}				// GETTERS & SETTERS		public function getVariable(name:String):String {			return pointroll.datastorage.readExternalVariable(name);		}		public function setVariable(name:String,value:String):void {			pointroll.datastorage.setExternalVariable(name,value);		}		public function get isAvailable():Boolean {			return pointroll.datastorage.dataStorageIsAvailable();		}		// EVENT		private function onTimerEvent(e:TimerEvent):void {			trace("Is DataStorage ready " + isAvailable + " count is " + _timer.currentCount);			if (isAvailable) {				dispatchEvent(new DataStorageEvents(DataStorageEvents.ON_DATA_STORAGE_LOAD,true));				_timer.stop();			}			if (_timer.currentCount == count_n) {				dispatchEvent(new DataStorageEvents(DataStorageEvents.ON_DATA_STORAGE_FAIL,false));			}		}	}}