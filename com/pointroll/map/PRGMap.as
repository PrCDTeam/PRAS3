package com.pointroll.map{	import PointRollAPI_AS3.mapping.PrMap;	import PointRollAPI_AS3.mapping.*;	import PointRollAPI_AS3.events.mapping.PrMapEvent;		import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.events.Event;		import com.pointroll.data.PRMapLoader;	import com.pointroll.data.PRMapParser;		import com.pointroll.events.PRMapParserEvents;	import com.pointroll.events.PRMarkerEvents;		public class PRGMap extends Sprite{				private var _map:PrMap;				private var _markers:Array;				private var _xmlLoader:PRMapLoader;		private var _xmlParser:PRMapParser;				private var StoreMarker:Class;				private var _mapService:String;						//PrMap(target:Sprite, centerLat:Number=NaN, centerLng:Number=NaN, startZoom:Number=NaN, mapKey:String=null) 		public function PRGMap(_mapHolder:Sprite,centerLatitude:Number=NaN, centerLng:Number=NaN, startZoom:Number=NaN, mapKey:String=null){			//trace("PRGMap " + _mapHolder.name);			_map = new PrMap(_mapHolder);			addEvents();		}				// PUBLIC METHODS		public function addMarker(marker:PrMarker):uint{			return _map.addMarker(marker);		}		public function centerOnLatLng(lat:Number, lng:Number):void{			_map.centerOnLatLng(lat, lng);		}		public function centerOnMarker(marker:PrMarker):void{			_map.centerOnMarker(marker);		}		public function centerOnMarkerNum(markerNum:uint):void{			_map.centerOnMarkerNum(markerNum);		}		public function centerOnZip(zip:String):void{			_map.centerOnZip(zip);		}		public function	createMarkerAt(lat:Number, lng:Number, markerIcon:DisplayObject, dataObject:Object = null):PrMarker{			return _map.createMarkerAt(lat, lng, markerIcon, dataObject);		}		public function destroyMap():void{			_map.destroyMap();		}		public function displayInfoWindow(marker:PrMarker):void{			_map.displayInfoWindow(marker);		}		public function fitAllMarkers():void{			_map.fitAllMarkers();		}		public function hideInfoWindow():void{			_map.hideInfoWindow();		}		public function removeAllMarkers():void{			_map.removeAllMarkers();		}		public function removeMarker(marker:PrMarker):void{			_map.removeMarker(marker);		}		public function removeMarkerNum(markerNum:uint):void{			_map.removeMarkerNum(markerNum);		}		public function setUpGoogleMap():void {			_xmlParser = new PRMapParser();			_xmlLoader = new PRMapLoader(_mapService,_xmlParser);			var bounds= _map.getLatLngBounds();			var bound_ne=bounds.getNorthWest();			var bound_sw=bounds.getSouthEast();			var nelat=bound_ne.lat();			var nelng=bound_ne.lng();			var swlat=bound_sw.lat();			var swlng=bound_sw.lng();						_map.removeAllMarkers();						/*_xmlLoader.setVariables("id","940494047");			_xmlLoader.setVariables("nwlat",nelat);			_xmlLoader.setVariables("nwlon",nelng);			_xmlLoader.setVariables("selat",swlat);			_xmlLoader.setVariables("selon",swlng);*/			_xmlLoader.getServiceData();		}			public function plotPins(a:Array):void {			var length_int:int = a.length;			for (var i:int = 0; i < length_int; i++) {				_map.createMarkerAt(a[i]._lat, a[i]._long, new StoreMarker(), a[i]);			}			_map.zoom = 10;			_map.centerOnZip(a[0]._zip);		}		public function addMapEvent(eventName:String, f:Function):void{			_map.addEventListener(eventName,f);		}		// PRIVATE FUNCTIONS		private function addEvents():void{					 _xmlLoader.addEventListener(PRMapParserEvents.ON_PARSER_COMPLETE, onPRMapParserComplete);			 _xmlLoader.addEventListener("noDataFound", onNoDataFound);			 _map.addEventListener(PrMapEvent.MARKER_CLICK, onMarkerClickEvent);		}				// EVENTS		private function onPRMapParserComplete(e:PRMapParserEvents):void{			//trace("onPRMapParserComplete: " + e);			dispatchEvent(new PRMapParserEvents(PRMapParserEvents.ON_PARSER_COMPLETE, e.params));			plotPins(e.params);		}		private function onNoDataFound(e:Event):void{			dispatchEvent(new Event("onNoStoresFound"));		}		private function onMapReadyEvent(e:PrMapEvent):void{			dispatchEvent(new Event("onMapReady"));		}		private function onGEOSuccess(e:PrMapEvent):void{			trace("onGEOSuccess");			dispatchEvent(new Event("onCenterOnZip"));					}				private function onMarkerClickEvent(e:PrMapEvent):void{			var m:PrMarker=e.feature as PrMarker;			// Upon click, display info window			_map.displayInfoWindow(m);			dispatchEvent(new PRMarkerEvents(PRMarkerEvents.ON_MARKER_CLICKED,m.dataObject));					}		// GETTERS & SETTERS				public function get centerLat():Number{			return _map.centerLat;		}		public function get centerLng():Number{			return _map.centerLng;		}		public function get centerLatitude():Number{			return _map.centerLat;		}		public function get markerArray():Array{			return _map.markerArray;		}		public function get positionControlEnabled():Boolean{			return _map.positionControlEnabled;		}		public function get scaleControlEnabled():Boolean{			return _map.scaleControlEnabled;		}		public function get trackActivites():Boolean{			return _map.trackActivities;		}		public function get zoom():Number{			return _map.zoom;		}		public function get zoomControlEnabled():Boolean{			return _map.zoomControlEnabled;		}				public function set baseURL(s:String):void{			_mapService = s;		}		public function set infoWindowRenderer(c:Class):void{			_map.infoWindowRenderer = c;		}		public function set markerArray(a:Array):void{			_map.markerArray = a;		}		public function set positionControlEnabled(b:Boolean):void{			_map.positionControlEnabled = b;		}		public function set scaleControlEnabled(b:Boolean):void{			_map.scaleControlEnabled = b;		}		public function set timeOut(n:Number):void{			PrMap.timeOut = n;		}		public function set trackActivites(b:Boolean):void{			_map.trackActivities = b;		}		public function set zoom(n:Number):void{			_map.zoom = n;		}		public function set zoomControlEnabled(b:Boolean):void{			_map.zoomControlEnabled = b;		}		public function set storeMarker(c:Class):void{			StoreMarker = c;		}	}	}