/************************************************************** Author: Tobi Echevarria** Company: PointRoll** Class: PointRollVideo implements IPointRollVideo interface***************************************************************/package com.pointroll.media{	import com.pointroll.api.media.PointrollVideo;	import com.pointroll.api.media.VideoDelivery;	import com.pointroll.api.media.IVideoDefinition;	import com.pointroll.api.media.tracking.ProgressTracker;		import com.pointroll.api.events.PrVideoEvent;	import com.pointroll.api.events.PrProgressEvent;		import pointroll.info.getVideoDeliveryMethod;	import com.pointroll.interfaces.IPointRollVideo;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.media.Video;	import flash.display.Sprite;	import com.pointroll.utils.ClassProperty;	public class PRVideo implements IEventDispatcher {		private var _initVolumeLevel:Number;		private var _deliveryType:Number;		private var _videoLenInSec:Number;		private var _videoInstanceNumber:Number;		private var _timeOut:int;		private var _advertiserFolder:String;		private var _baseProgFilePath:String;		private var _baseStreamName:String;		private var _baseFilePath:String;		private var _videoObject:Video;		private var _pointrollVideo:PointrollVideo;		private var _pointrollVideoDefinition:IVideoDefinition;		public function PRVideo(videoObject:Video, defaultDeliveryMethod:uint,...args) {			_videoObject = videoObject;			_pointrollVideo = new PointrollVideo(videoObject,defaultDeliveryMethod);			if (args.length) {				var _length:int = args.length;				for (var i:int = 0; i < _length; i++) {					if (_pointrollVideo.hasOwnProperty(args[i].p) && ClassProperty.hasSetter(_pointrollVideo,args[i].p)) {						_pointrollVideo[args[i].p] = args[i].v;					}					if (_pointrollVideo.progressTracker.hasOwnProperty(args[i].p) && ClassProperty.hasSetter(_pointrollVideo.progressTracker,args[i].p)) {						_pointrollVideo.progressTracker[args[i].p] = args[i].v;					}				}			}		}		public function startPointRollVideo(videoDefinition:IVideoDefinition):void {			_pointrollVideoDefinition = videoDefinition;			_pointrollVideo.playVideo(_pointrollVideoDefinition);		}		public function addVideoEvent(eventName:String):void {			_pointrollVideo.addEventListener(eventName, onPrVideoEvent);		}		public function addProgressVideoEvent(eventName:String):void {			_pointrollVideo.progressTracker.addEventListener(eventName, onPrProgressEvent);		}		public function resume():void {			_pointrollVideo.resume();		}		public function pause():void {			_pointrollVideo.pause();		}		public function stop():void {			_pointrollVideo.stop();		}		public function restart():void {			_pointrollVideo.restart();		}		public function mute():void {			_pointrollVideo.mute();		}		public function unmute():void {			_pointrollVideo.unmute();		}		public function restartWithSound(vol:Number = 1):void {			_pointrollVideo.restartWithSound(vol);		}		public function seek(timeInSeconds:Number):void {			_pointrollVideo.seek(timeInSeconds);		}		public function addNetStreamClient(client:Object):void {			_pointrollVideo.addNetStreamClient(client);		}		public function destroy():void {			_pointrollVideo.destroy();		}		public function setVideoProperty(p:String, v:*) {			if (_pointrollVideo.hasOwnProperty(p) && ClassProperty.hasSetter(_pointrollVideo,p)) {				_pointrollVideo[p] = v;			}			else {				trace("pointroll video property doesn't exist or is read only");			}		}		// Implement IEventDispatcher Contract		public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void {			_pointrollVideo.addEventListener(type, listener, useCapture, priority);		}		public function dispatchEvent(evt:Event):Boolean {			return _pointrollVideo.dispatchEvent(evt);		}		public function hasEventListener(type:String):Boolean {			return _pointrollVideo.hasEventListener(type);		}		public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void {			_pointrollVideo.removeEventListener(type, listener, useCapture);		}		public function willTrigger(type:String):Boolean {			return _pointrollVideo.willTrigger(type);		}		// EVENTS;		private function onPrProgressEvent(e:PrProgressEvent):void {			trace(e.customMilestone);			dispatchEvent(e);		}		private function onPrVideoEvent(e:PrVideoEvent):void {			dispatchEvent(e);		}				// Getters & Setters		public function get progressTracker():ProgressTracker{			return _pointrollVideo.progressTracker;		}	}}/*_pointrollVideo.progressTracker.addEventListener(PrProgressEvent.MEDIA_START, onPrProgressEvent);_pointrollVideo.progressTracker.addEventListener(PrProgressEvent.MEDIA_COMPLETE, onPrProgressEvent);_pointrollVideo.addEventListener(PrVideoEvent.STOP, onPrVideoEvent);_pointrollVideo.addEventListener(PrVideoEvent.PAUSE, onPrVideoEvent);_pointrollVideo.addEventListener(PrVideoEvent.RESTART, onPrVideoEvent);_pointrollVideo.addEventListener(PrVideoEvent.RESUME, onPrVideoEvent);_pointrollVideo.addEventListener(PrVideoEvent.RESTART, onPrVideoEvent);*/