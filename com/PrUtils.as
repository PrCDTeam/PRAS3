package com {	import pointroll.initAd;	import pointroll.datastorage.*;	import pointroll.panel.*	import pointroll.info.getFolderPath	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.Dictionary;	import flash.display.Bitmap;	import flash.events.EventDispatcher	import flash.utils.setTimeout;	import flash.utils.clearTimeout;	import flash.utils.setInterval;	import flash.utils.clearInterval;	import pointroll.getFlashVar;	import flash.system.LoaderContext;	public class PrUtils extends EventDispatcher{		public static const IMAGE_PROXY:String = 'http://smq.pointroll.com/clients/pointroll/image/thumbnailproxy.ashx?url=';		public static const AUTOPANEL_CLOSE:String = 'autoPanelClose';		public static const AUTOPANEL_OPEN:String = 'autoPanelOpen';		public static const IMAGE_LOAD_COMPLETE:String = 'imageLoadComplete';				private static const PRE:String = 'PR Utils:> ';						public static var instance:PrUtils;		private static var textBoxSizeDictionary:Dictionary = new Dictionary()		public var live:Boolean;		public var rollExp:Boolean;		public var isPreExp:Boolean;		public var isAutoPanel:Boolean;		public var autoPanelTime:int;		public var imageFolder:String;				private var main_mc:MovieClip;		private var pinned:Boolean = false;		private var pushDistance:int = 0;		private var containerDict:Dictionary = new Dictionary();		private var containerArray:Array = new Array();		private var imgNum:uint = 0;		private var autoPanelTimeout:Number;		private var intervalDictionary:Dictionary = new Dictionary();				public function PrUtils(main:MovieClip, isPanel:Boolean = false) {			pointroll.initAd(main)			main_mc = main;			instance = this;			live = (main_mc.root != null)? (main_mc.root.loaderInfo.url.indexOf('file') != 0) : false;			imageFolder = (live)? pointroll.info.getFolderPath() : 'images/';			rollExp = (pointroll.getFlashVar('rollExp') != 'false')			if(isPanel && !rollExp)instance.pinPanel();		}				public static function launchClick(tag = 1, newWindow:Boolean = true, noun:String = null):void{			var n:String = (tag is String)? tag + 'ClickTag' : 'clickTag' + Math.floor(tag);			if(instance)instance.unpinPanel();			pointroll.launchURL(pointroll.getFlashVar(n), newWindow, noun)			log(n);				}				public static function launchEmptyClick(tag, url:String, newWindow:Boolean = true, noun:String = null):void{			var n:String = (tag is String)? tag + 'ClickTag' : 'clickTag' + Math.floor(tag);			n = pointroll.getFlashVar(n) || '';			if(instance)instance.unpinPanel();			pointroll.launchURL(n + encodeURIComponent(url), newWindow, noun);				log(url);		}				public static function addMouseEvent(type:String, handler:Function, ...clips:Array):void{			for each(var mc:DisplayObject  in clips){				mc.addEventListener(type, handler)				if(mc is MovieClip){					MovieClip(mc).buttonMode = true;					MovieClip(mc).mouseChildren = false;					if(type == MouseEvent.MOUSE_OVER)MovieClip(mc).gotoAndStop(1)				}			}		}				public function setVar(variable:String, defValue:String):void{			if(pointroll.getFlashVar(variable) != null){				main_mc[variable] = pointroll.getFlashVar(variable);				log(variable + ':   ' + pointroll.getFlashVar(variable));			} else {				main_mc[variable] = defValue;				log(variable + ':   ' + defValue);			}		}		//-- PRE-EXPANDABLE CONTROLS --------------------------------------------------------------//		public function createAutoUIPanel(distance:int = 0, autoStartTimer:Boolean = true, closeButton_mc:* = null):void{			isAutoPanel = (pointroll.getFlashVar('isAutoPanel') != 'false');			autoPanelTime = int(pointroll.getFlashVar('autoPanelTime')) || 10;			trace('ROLL EXP:', rollExp)			instance.pinPanel();						if(closeButton_mc != null)closeButton_mc.addEventListener(MouseEvent.CLICK, close)			if(distance != 0){				pushDistance = distance;				pointroll.panel.pushDownPanel(0, distance);			}						if(isAutoPanel){				setDSVar('autoPanelClosed', 'false')				if(autoStartTimer)startAutoPanelTimer();			} else if (rollExp){				main_mc.stage.addEventListener(Event.MOUSE_LEAVE, close);			}		}				public function startAutoPanelTimer():void{			if(isAutoPanel){				autoPanelTimeout = setTimeout(close, autoPanelTime*1000)				trace('START AUTO PANEL TIMER', autoPanelTime)			}		}				public function createPreExpBanner():void{			trace("REMINDER: Call 'killPanelListener()' when 'AUTOPANEL_CLOSE' event is dispatched")			isPreExp = (pointroll.getFlashVar('isPreExp') == 'true');			if(live && isPreExp){				pointroll.datastorage.checkOnInterval('autoPanelClosed', 100,  autoPanelClosedHandler)			}else{				autoPanelClosedHandler('autoPanelClosed', 'true')			}		}				public function killPanelListener():void{			if(isPreExp)stopDSAlert('autoPanelClosed')		}				private function autoPanelClosedHandler(n:String, v:String):void{						if(v == 'true'){				alertPanelClosed()			}			}				public function stopAutoPanelTimer():void{			if(isAutoPanel){				clearTimeout(autoPanelTimeout);			}		}				private function alertPanelClosed():void{			dispatchEvent(new Event(AUTOPANEL_CLOSE));			setDSVar('autoPanelClosed', 'true')	}		//-- FIT TEXT ------------------------------------------------------------------//		public static function loadProxiedImage(loader:Loader, imageName:String):void{			loader.load(proxyImageRequest(imageName), new LoaderContext(false))			trace(proxyImageRequest(imageName).url)		}		public static function proxyImageRequest(imageName:String):URLRequest{			var r:URLRequest = ((instance && instance.live) || !instance)? new URLRequest(attachProxyURL(imageName)) : new URLRequest(imageName)			return r;		}		public static function attachProxyURL(imageName:String):String{			return IMAGE_PROXY + escape(imageName)			}		public static function truncateTextToFit(tf:TextField, str:String):void {			var origWidth:Number = tf.width;			var origHeight:Number = tf.height;			tf.text = str;					if(tf.multiline){				while (tf.textHeight>origHeight) {					tf.text = tf.text.slice(0,tf.text.length - 2) + "…" ;					tf.text = tf.text.substr(0, tf.text.lastIndexOf(' '))  + "…";				}			}else{				while (tf.textWidth > origWidth) {					tf.text = tf.text.slice(0,tf.text.length - 2) + "…";					tf.text = tf.text.substr(0, tf.text.lastIndexOf(' '))  + "…";				}			}		}		public static function shrinkTextToFit(tf:TextField, str:String, maxSize:uint = 20):void {			var f:TextFormat;								if(textBoxSizeDictionary[tf.parent.name+tf.name+'W'] == null){				textBoxSizeDictionary[tf.parent.name+tf.name+'W'] = int(tf.width)				textBoxSizeDictionary[tf.parent.name+tf.name+'H'] = int(tf.height)			} else {				tf.width = textBoxSizeDictionary[tf.parent.name+tf.name+'W']				tf.height = textBoxSizeDictionary[tf.parent.name+tf.name+'H']				tf.autoSize = 'none'			}						tf.htmlText = str;			f = tf.getTextFormat();			f.size = maxSize;			tf.setTextFormat(f)											while(tf.textHeight > tf.height - 4  || tf.textWidth > tf.width - 10){				f.size = int(f.size) - 1;				tf.setTextFormat(f);			}						tf.setTextFormat(f);			tf.autoSize = tf.getTextFormat().align		}//-- LOAD IMAGES ------------------------------------------------------------------//				public function loadImageInto(mc:MovieClip, img:String, scale:Number = 1):void{			var loader:Loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoadCompleteHandler);			loader.load(new URLRequest(imageFolder + img));			containerDict[loader] = mc			mc.scaleX = mc.scaleY = scale;			imgNum++;		}				private function imageLoadCompleteHandler(e:Event):void{			var l:Loader = e.target.loader;			var h:MovieClip = containerDict[l] as MovieClip;			var bitmap:Bitmap = Bitmap(l.content);			bitmap.smoothing = true;			h.dispatchEvent(new Event(IMAGE_LOAD_COMPLETE))			bitmap.x = int(-.5 * bitmap.width)			bitmap.y = int(-.5 * bitmap.height)			h.addChild(bitmap);		}				public function removeChars(str:String, chars:String):String {			var l:uint = str.length;			var retString:String = '';			for (var i:int = 0; i < l; i++) {				if(chars.indexOf(str.charAt(i)) == -1){					retString += str.charAt(i);									}			}						return retString;		}	//-- DATA STORAGE ------------------------------------------------------------------//		public function stopDSAlert(n:String):void{			if(live)pointroll.datastorage.stopAlert(n)		}				public function checkDSVarOnInterval(n:String, interval:int, funct:Function):void{			if(live)pointroll.datastorage.checkOnInterval(n, interval, funct)		}				public function setDSVar(n:String, v:String):void{			trace('DATA STORAGE: ', n, '>>', v)			if(live){				pointroll.datastorage.setExternalVariable(n, v)			}		}				public function getDSVar(n:String, testValue:String = ''):String{			if(live){				trace('getDSVar:', pointroll.datastorage.readExternalVariable(n))				return pointroll.datastorage.readExternalVariable(n);			} else {				return testValue;			}		}		//-- CLOSE / PIN ------------------------------------------------------------------//		public function unpinPanel():void{			if(!main_mc.stage.hasEventListener(Event.MOUSE_LEAVE)){				main_mc.stage.addEventListener(Event.MOUSE_LEAVE, close);			}						if(pinned){				pointroll.panel.unPinPanel();				pinned = false;			}		}				public function pinPanel():void{			if(main_mc.stage.hasEventListener(Event.MOUSE_LEAVE)){				main_mc.stage.removeEventListener(Event.MOUSE_LEAVE, close);			}						if(!pinned){				pointroll.panel.pinPanel();				pinned = true;			}		}				public function close(e:* = null):void{			unpinPanel()						if(isAutoPanel)alertPanelClosed()						if(pushDistance == 0){				pointroll.panel.closePanel();						}else{				pointroll.panel.pushDownPanel(0, -pushDistance)				setTimeout(pointroll.panel.closePanel, 100)			}						clearTimeout(autoPanelTimeout)		}						private static function log(m:String):void{			trace(PRE + m);		}	}}